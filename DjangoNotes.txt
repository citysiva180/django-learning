##############################################################
    ____    _                            ____            __ 
   / __ \  (_)___ _____  ____ _____     / __ \___  _____/ /_
  / / / / / / __ `/ __ \/ __ `/ __ \   / /_/ / _ \/ ___/ __/
 / /_/ / / / /_/ / / / / /_/ / /_/ /  / _, _/  __(__  ) /_  
/_____/_/ /\__,_/_/ /_/\__, /\____/  /_/ |_|\___/____/\__/  
     /___/            /____/                                

#############################################################

Course : Django 
Tutor :  Mosh Hamedani 
Year  : 2022

#############################################################

+--------------+
| Introduction |
+--------------+

- Its a free and open source framework which is super popular 
- Its also known as a batteries included framework 
- It helps in giving out many features out of the box such as Admin site, ORM, Authentication and Caching 

This helps in focusing in just building the app than building a syntax.. 

Remember, Django is a backend framework. Not frontend Framework!! 

+--------------------------+
| Creating Your Django App |
+--------------------------+

- To Create a django project, best use a virtual environment to work on the same 
- You could use the pipenv package to create your virtual environment 
- Use the pipenv Shell command to create a virtual environment 
- Now use the below command to create a django project 

      "django-admin startproject storefront"

- On Using this command, you might end up with a recursive folder with a main folder and the subsidiary folder with the same name 
- To avoid this use the below command 

      "django-admin startproject storefront ."

+--------------------------+
| Creating your first App  |
+--------------------------+

To understand apps, check out your settings.py file. note that there is a list of installed apps which are present there
Understand that the Django Will only work with the app listed in this list. So you need to add your created app so the same would work 

INSTALLED_APPS = [
    'django.contrib.admin',   --> The Django Admin listed here will help us with the crud base admin panel, which is super useful for Content Management System
    'django.contrib.auth',    --> This app will help us to authenticate users in our app. I guess, these days we could use 
    'django.contrib.contenttypes',  --> This will be discussed later 
    'django.contrib.sessions', --> Sessions are rarely used these days. Hence this app is deleted
    'django.contrib.messages', --> Messages app helps in notifying users for their actions
    'django.contrib.staticfiles', --> Static Files deals with the images and other static assets added in the django Project 
]

To Create our own app, We need to run this following command 
- " python manage.py startapp playground "

Ensure to change to the directory and run the command. 

On checking the folder structure of the app you could observe the following 

- playground --> App folder name 
      - Migrations --> DB folder 
      - __init__.py --> Package initializer 
      - admin.py  --> Administrator | how the admin interface for this app will look like   
      - apps.py  --> Should be config.py but they are calling it apps.py 
      - models.py --> Models.py will help in adding the db models to this app 
      - tests.py --> users for testing 
      - views.py --> This name is misleading. Its a controller or a request handler


Now register your app in the Installed apps. 

+--------------------------+
| Creating your first App  |
+--------------------------+

Writing views : 
      A view in django is nothing but a request handler. It would consume HTTP request and give out response 
      - A view here in django is a very misleading name. Since Views deal with only the viewing part of the app, this naming is not appropriate 
      for the app file 
      - Where in the actual visual views in django app is known as a template. Guess this is the major reason why we confuse django views


+------------+
| Templates  |
+------------+

The templates are the actual views in a django project. 
Create a template folder with the html file. 
pass the html file in the view folder so the logic could be executed to run the same 

+---------------------+
| Adding Debug tools  |
+---------------------+

- Use vs code debug tool to click on the create json file. Select Django as the debuging option
- With this you could add breakpoints and add variables to watch list so you could check on the same 
- Use this debug tool to keep watch variables and breakpoints so you could check the variable assigning 

Django DeBug Tools 

- Using Django debug tools which is a python package you could add a debug tool bar which will help you in seeing the 
requests and responses sent to your django app. This would help you to visualize SQL queries and other elements which are applied to your applications

- use the "python -m pip install django-debug-toolbar" to install the app 
- Add the app  to the Installed apps in the settings 


                  INSTALLED_APPS = [
                  # ...
                  "debug_toolbar",
                  # ...
                  ]

-  Add django-debug-toolbar’s URLs to your project’s URLconf:

      from django.urls import include, path

            urlpatterns = [
            # ...
            path('__debug__/', include('debug_toolbar.urls')),
            ]

 - The Debug Toolbar is mostly implemented in a middleware. Add it to your MIDDLEWARE setting:

            MIDDLEWARE = [
                  # ...
                  "debug_toolbar.middleware.DebugToolbarMiddleware",
                  # ...
            ]

Finally on running you could find the toolbar up the right side in your browser 

+----------------------------+
| Organizing Models in Apps  |
+----------------------------+

